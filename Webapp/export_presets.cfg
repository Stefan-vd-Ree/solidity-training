[preset.0]

name="HTML5"
platform="HTML5"
runnable=true
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="../../../05. Godot Projects/Builds/Solidity_Training/BuyCoffee/webapp/Training_BuyCoffee-webapp.html"
script_export_mode=1
script_encryption_key=""

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/export_type=0
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script type=\"module\">
    import { ethers } from \"./ethers-5.6.esm.min.js\";
	
	const provider = new ethers.providers.Web3Provider(window.ethereum);
	await provider.send(\"eth_requestAccounts\", []);
	const block = await provider.getBlockNumber();
	console.log(block);
	const signer = provider.getSigner();
</script>

<script>
function getProvider() {
	const provider = new _ethers.providers.Web3Provider(window.ethereum);
	// verify that the user is on the correct network or throw an error or request to change
	return provider;
}
</script>

<script>
function getSigner(provider) {
	const signer = provider.getSigner();
	return signer;
}
</script>

<script>
function getSigner(provider) {
	const signer = provider.getSigner();
	return signer;
}
</script>

<script>
async function sendEther(signer, recipientAddress, valueInEther ) {
	try {
		const transaction = await signer.sendTransaction({
			to: recipientAddress,
			value: _ethers.utils.parseEther(valueInEther.toString()),
      })
            
		await transaction.wait();
		console.log('Transaction mined:', transaction.hash);
        } catch (error) {
	console.error('Error sending transaction:', error);
	}
}
</script>

<script>
async function signMessage(signer, message) {
    try {
        const signature = await signer.signMessage(message);
        console.log('Signature:', signature);
		return signature;
    } catch (error) {
        console.error('Error signing message:', error);
        throw error; // Rethrow the error to propagate it
    }
}
</script>

<script>
async function verifySignature(signedMessage, signedMessagePromise, knownAddress) {
    console.log('Signature:', signedMessagePromise);
	try {
		const signature = await signedMessagePromise;
		console.log('Signature:', signature);
        const recoveredAddress = _ethers.utils.verifyMessage(signedMessage, signature);
        
        if (recoveredAddress === knownAddress) {
            console.log('Signature is valid. Message was signed by the known public address.');
        } else {
            console.log('Signature is not valid. Message was not signed by the known public address.');
        }
    } catch (error) {
        console.error('Error verifying signature:', error);
    }
}
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=true
progressive_web_app/enabled=false
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color( 0, 0, 0, 1 )
